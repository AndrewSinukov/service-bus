parameters:
  service_bus.services_map: []
  service_bus.default_destination_topic: ''
  service_bus.default_destination_key: ''

services:
  _defaults:
    autowire: false
    autoconfigure: false
    public: false

  # @see TaggedMessageHandlersCompilerPass
  service_bus.services_locator:
    public: true

  # Application environment
  ServiceBus\Environment:
    factory: ['ServiceBus\Environment', 'create']
    arguments:
      $environment: '%service_bus.environment%'

  # Default logger instance
  service_bus.logger:
    class: Psr\Log\NullLogger

  # Detect blocking ticks in an event loop
  ServiceBus\Infrastructure\Watchers\LoopBlockWatcher:
    arguments:
      $logger: '@service_bus.logger'

  # Periodic forced launch of the garbage collector
  ServiceBus\Infrastructure\Watchers\GarbageCollectorWatcher:
    arguments:
      $interval: 600000
      $logger: '@service_bus.logger'

  # Retrieving a list of message handlers for the specified object
  ServiceBus\Services\Configuration\ServiceHandlersLoader:
    class: ServiceBus\Services\Configuration\AnnotationsBasedServiceHandlersLoader

  # Symfony serializer message decoder
  ServiceBus\MessageSerializer\MessageDecoder:
    class: ServiceBus\MessageSerializer\Symfony\SymfonyMessageSerializer
    arguments:
      $serializer: null
      $normalizers: ~

  # Incoming message decoder
  service_bus.decoder_locator:
    class: Symfony\Component\DependencyInjection\ServiceLocator
    tags: ['container.service_locator']
    arguments:
      - 'service_bus.default_encoder': '@ServiceBus\MessageSerializer\MessageDecoder'

  # Internal kernel locator
  service_bus.public_services_locator:
    public: true
    class: Symfony\Component\DependencyInjection\ServiceLocator
    tags: ['container.service_locator']
    arguments:
      - service_bus.logger: '@service_bus.logger'
        ServiceBus\Endpoint\EndpointRouter: '@ServiceBus\Endpoint\EndpointRouter'
        ServiceBus\EntryPoint\EntryPointProcessor: '@ServiceBus\EntryPoint\EntryPointProcessor'
        ServiceBus\Infrastructure\Watchers\LoopBlockWatcher: '@ServiceBus\Infrastructure\Watchers\LoopBlockWatcher'
        ServiceBus\Infrastructure\Watchers\GarbageCollectorWatcher: '@ServiceBus\Infrastructure\Watchers\GarbageCollectorWatcher'

  # Incoming message decoder
  ServiceBus\EntryPoint\IncomingMessageDecoder:
    arguments:
      $decodersContainer: '@service_bus.decoder_locator'

  # Handling incoming package
  ServiceBus\EntryPoint\EntryPointProcessor:
    class: ServiceBus\EntryPoint\DefaultEntryPointProcessor
    arguments:
      $messageDecoder: '@ServiceBus\EntryPoint\IncomingMessageDecoder'
      $messagesRouter: '@ServiceBus\MessageRouter\Router'
      $logger: '@service_bus.logger'

  # Application entry point
  ServiceBus\EntryPoint\EntryPoint:
    arguments:
      $processor: '@ServiceBus\EntryPoint\EntryPointProcessor'
      $logger: '@service_bus.logger'
      $maxConcurrentTaskCount: 60
      $awaitDelay: 40

  # Isolated service locator for routing configuration
  service_bus.routing_configuration_locator:
    class: Symfony\Component\DependencyInjection\ServiceLocator
    tags: ['container.service_locator']
    arguments:
      - Desperado\ServiceBus\Services\Configuration\ServiceHandlersLoader: '@ServiceBus\Services\Configuration\ServiceHandlersLoader'

  # Message routes configurator
  service_bus.message_routes_configurator:
    class: ServiceBus\Application\DependencyInjection\Configurator\MessageRoutesConfigurator
    arguments:
      $servicesList: '%service_bus.services_map%'
      $routingServiceLocator: '@service_bus.routing_configuration_locator'
      $servicesServiceLocator: '@service_bus.services_locator'
      $argumentResolvers:
        - '@ServiceBus\ArgumentResolvers\MessageArgumentResolver'
        - '@ServiceBus\ArgumentResolvers\ContextArgumentResolver'
        - '@ServiceBus\ArgumentResolvers\ContainerArgumentResolver'

  # Outbound message routing
  ServiceBus\Endpoint\EndpointRouter:

  # Incoming messages router
  ServiceBus\MessageRouter\Router:
    configurator: ['@service_bus.message_routes_configurator', configure]

  # Passing message to arguments
  ServiceBus\ArgumentResolvers\MessageArgumentResolver:

  # Passing context to arguments
  ServiceBus\ArgumentResolvers\ContextArgumentResolver:

  # Autowiring of registered services in arguments
  ServiceBus\ArgumentResolvers\ContainerArgumentResolver:
    arguments:
      # see TaggedMessageHandlersCompilerPass::process
      $serviceLocator: '@service_bus.services_locator'
    tags: ['service_bus_argument_resolver']



